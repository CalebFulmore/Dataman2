package dm3;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

class ButtonClickListener implements ActionListener {
    private JTextField mainDisplay;
    private AnswerChecker answerChecker;
    private boolean secondAttemptAllowed;
    private String lastOperation;
    private int lastDividend;
    private int lastDivisor;
    private JTextField correctDisplay;
    private JTextField attemptDisplay;
    private AtomicInteger correctCount;
    private AtomicInteger attemptCount;
    private GuiView guiView;

    public ButtonClickListener(JTextField mainDisplay, JTextField correctDisplay,
                               JTextField attemptDisplay, AtomicInteger correctCount,
                               AtomicInteger attemptCount, GuiView guiView) {
        this.mainDisplay = mainDisplay;
        this.correctDisplay = correctDisplay;
        this.attemptDisplay = attemptDisplay;
        this.correctCount = correctCount;
        this.attemptCount = attemptCount;
        this.guiView = guiView;
        this.answerChecker = new AnswerChecker();
        this.secondAttemptAllowed = true;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        switch (command) {
            case "On":
            case "New":
                prepareNewProblem();
                break;
            case "Enter":
                evaluateAnswer();
                break;
            case "Off":
                resetCountsAndDisplays();
                break;
            default:
                appendToDisplay(command);
                break;
        }
    }

    private void prepareNewProblem() {
        mainDisplay.setText("=");
        secondAttemptAllowed = true;
        lastOperation = null;
    }

    private void resetCountsAndDisplays() {
        correctCount.set(0);
        attemptCount.set(0);
        correctDisplay.setText("0");
        attemptDisplay.setText("0");
        mainDisplay.setText("");
    }

    private void appendToDisplay(String command) {
        if ("=".equals(mainDisplay.getText())) {
            mainDisplay.setText("");
        }
        mainDisplay.setText(mainDisplay.getText() + command);
    }
    
    private String getCorrectAnswer(String operation, int dividend, int divisor) {
        switch (operation) {
            case "÷":
                int correctQuotient = dividend / divisor;
                int remainder = dividend % divisor;
                return correctQuotient + (remainder > 0 ? " R " + remainder : "");
            case "+":
                return String.valueOf(dividend + divisor);
            case "-":
                return String.valueOf(dividend - divisor);
            case "×":
                return String.valueOf(dividend * divisor);
            default:
                return "";
        }
    }

    private void evaluateAnswer() {
        String displayText = mainDisplay.getText();
        if (displayText.contains("=")) {
            String[] parts = displayText.split("[÷×\\-+]|=");
            if (parts.length == 3) {
                try {
                    int firstNumber = Integer.parseInt(parts[0].trim());
                    int secondNumber = Integer.parseInt(parts[1].trim());
                    int userAnswer = Integer.parseInt(parts[2].trim());
                    String result = "";
                    boolean isCorrect = false;

                    if (displayText.contains("÷")) {
                        lastOperation = "÷";
                        lastDividend = firstNumber;
                        lastDivisor = secondNumber;
                        result = answerChecker.checkDivisionAnswer(firstNumber, secondNumber, userAnswer);
                        isCorrect = result.startsWith("Good job") || result.equals("Correct");
                    } else if (displayText.contains("+")) {
                        lastOperation = "+";
                        result = answerChecker.checkAdditionAnswer(firstNumber, secondNumber, userAnswer);
                        isCorrect = "Correct".equals(result);
                    } else if (displayText.contains("-")) {
                        lastOperation = "-";
                        result = answerChecker.checkSubtractionAnswer(firstNumber, secondNumber, userAnswer);
                        isCorrect = "Correct".equals(result);
                    } else if (displayText.contains("×")) {
                        lastOperation = "×";
                        result = answerChecker.checkMultiplicationAnswer(firstNumber, secondNumber, userAnswer);
                        isCorrect = "Correct".equals(result);
                    }

                    if (!isCorrect && !secondAttemptAllowed) {
                        String correctAnswer = getCorrectAnswer(lastOperation, lastDividend, lastDivisor);
                        mainDisplay.setText(correctAnswer); // Display the correct answer
                        secondAttemptAllowed = true; // Allow a new problem
                    } else if (isCorrect) {
                        correctCount.incrementAndGet(); // Increment the correct answer count here
                        SwingUtilities.invokeLater(() -> guiView.flashLight(Color.GREEN, 500, 2000));
                        prepareNewProblem(); // Prepare a new problem after a correct answer
                    }

                    attemptCount.incrementAndGet();
                    correctDisplay.setText(String.valueOf(correctCount.get()));
                    attemptDisplay.setText(String.valueOf(attemptCount.get()));

                } catch (NumberFormatException ex) {
                    mainDisplay.setText("Error: Invalid Input");
                }
            } else {
                mainDisplay.setText("Error: Incomplete Equation");
            }
        }
    }
}
